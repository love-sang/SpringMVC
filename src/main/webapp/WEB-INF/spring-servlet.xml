<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射--><!-- <mvc:annotation-driven /> -->
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service" />
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
    <bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basename" value="classpath:message/validatemessages"/>  
        <property name="fileEncodings" value="utf-8"/>  
        <property name="cacheSeconds" value="120"/>  
	</bean> 
      
    <!-- 如果当前请求为"/"时，则转发到“/helloworld/index" -->
    <mvc:view-controller path="/" view-name="forward:/helloworld/index"/> 
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/" />
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/" />
    <mvc:resources mapping="/fonts/**" location="/WEB-INF/fonts/" />
    <mvc:resources mapping="/plugins/**" location="/WEB-INF/plugins/" />
    <mvc:resources mapping="images/**" location="/WEB-INF/images/" />
    <!-- 当上面要访问的静态资源不包括在上面的配置中时，则根据此配置来访问 -->
    <mvc:default-servlet-handler/>

	<!-- 开启controller注解支持 -->
    <!-- use-default-filters="false" 只扫描指定的注解 -->
    <context:component-scan base-package="com.somnus.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
	
    <!-- 视图解析器 -->
    <!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
       <property name="contentType" value="text/html"/>        
       <property name="prefix" value="/WEB-INF/views/"/>
       <property name="suffix" value=".jsp"/>
    </bean> -->
    <!-- 视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<!-- 不加配置返回 {"account":{"username":"admin","password":"123456"}} -->
				<!-- 加配置返回 {"username":"admin","password":"123456"}-->
				<!--视图解析器解析json数据-->
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="extractValueFromSingleKeyModel" value="true" /> 
				</bean>
				<!--视图解析器解析xml数据-->
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView"> 
                    <property name="marshaller"> 
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller"/> 
                    </property> 
                </bean> 
			</list>
		</property>
	</bean>
    
    <!-- 支持上传文件 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <!-- 设置上传文件的最大尺寸为1MB -->  
	    <property name="maxUploadSize">  
	        <value>1048576</value>  
	    </property>
	    <property name="defaultEncoding"> 
			<value>UTF-8</value> 
		</property>
    </bean>
    
    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/helloworld/*"/>
    		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
        	<bean class="com.somnus.interceptor.AuthInterceptor"></bean>
    	</mvc:interceptor> 
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --> 
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />  
    </mvc:interceptors>
    
    <!-- ################################################################ -->
    <!--    注意：当spring-servlet.xml中使用<mvc:annotation-driven/>时，                               -->
    <!--    如果是3.1之前已经默认注入AnnotationMethodHandlerAdapter，                                                 -->
    <!--    3.1之后默认注入RequestMappingHandlerAdapter只需加上相关jackson的jar包即可! -->
    <!-- ################################################################ -->
    
    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>  
            </list>  
        </property>  
    </bean> -->
    
</beans>
